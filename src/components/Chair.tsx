/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models-3d/chair.gltf --types
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
	nodes: {
		Chair: THREE.Mesh;
		Cushion: THREE.Mesh;
		Legs1: THREE.Mesh;
		Legs2: THREE.Mesh;
	};
	materials: {
		Chair: THREE.MeshStandardMaterial;
		Cushion: THREE.MeshStandardMaterial;
		Legs: THREE.MeshStandardMaterial;
	};
};

const Chair = (props: JSX.IntrinsicElements["group"]) => {
	const { nodes, materials } = useGLTF("./models-3d/chair.gltf") as GLTFResult;

	const leatherTextureProps = useTexture({
		map: "./textures/leather-texture/Leather_Padded_001_basecolor.jpg",
		// displacementMap: "./textures/leather-texture/Leather_Padded_001_height.png",
		normalMap: "./textures/leather-texture/Leather_Padded_001_normal.jpg",
		roughnessMap: "./textures/leather-texture/Leather_Padded_001_roughness.jpg",
		aoMap: "./textures/leather-texture/Leather_Padded_001_ambientOcclusion.jpg",
	});

	// To prevent the texture from looking stretched we double it
	leatherTextureProps.map.repeat.set(3, 3);
	leatherTextureProps.normalMap.repeat.set(3, 3);
	// leatherTextureProps.displacementMap.repeat.set(3, 3);
	leatherTextureProps.roughnessMap.repeat.set(3, 3);
	leatherTextureProps.aoMap.repeat.set(3, 3);

	leatherTextureProps.map.wrapS =
		leatherTextureProps.map.wrapT =
		leatherTextureProps.normalMap.wrapS =
		leatherTextureProps.normalMap.wrapT =
		leatherTextureProps.roughnessMap.wrapS =
		leatherTextureProps.roughnessMap.wrapT =
		// leatherTextureProps.displacementMap.wrapS = leatherTextureProps.displacementMap.wrapT =
		leatherTextureProps.aoMap.wrapS =
		leatherTextureProps.aoMap.wrapT =
			THREE.RepeatWrapping;

	const fabricTextureProps = useTexture({
		map: "./textures/fabric-texture/Substance_Graph_BaseColor.jpg",
		// displacementMap: "./textures/fabric-texture/fabric_Padded_001_height.png",
		normalMap: "./textures/fabric-texture/Substance_Graph_Normal.jpg",
		roughnessMap: "./textures/fabric-texture/Substance_Graph_Roughness.jpg",
		aoMap: "./textures/fabric-texture/Substance_Graph_AmbientOcclusion.jpg",
	});

	// To prevent the texture from looking stretched we double it
	fabricTextureProps.map.repeat.set(3, 3);
	fabricTextureProps.normalMap.repeat.set(3, 3);
	// fabricTextureProps.displacementMap.repeat.set(3, 3);
	fabricTextureProps.roughnessMap.repeat.set(3, 3);
	fabricTextureProps.aoMap.repeat.set(3, 3);

	fabricTextureProps.map.wrapS =
		fabricTextureProps.map.wrapT =
		fabricTextureProps.normalMap.wrapS =
		fabricTextureProps.normalMap.wrapT =
		fabricTextureProps.roughnessMap.wrapS =
		fabricTextureProps.roughnessMap.wrapT =
		// fabricTextureProps.displacementMap.wrapS = fabricTextureProps.displacementMap.wrapT =
		fabricTextureProps.aoMap.wrapS =
		fabricTextureProps.aoMap.wrapT =
			THREE.RepeatWrapping;

	return (
		<group {...props} dispose={null}>
			<mesh geometry={nodes.Chair.geometry}>
				<meshStandardMaterial {...leatherTextureProps} roughness={1}/>
			</mesh>
			<mesh geometry={nodes.Cushion.geometry} position={[0, 0.06, 0.04]}>
				<meshStandardMaterial {...fabricTextureProps} />
			</mesh>
			<mesh
				geometry={nodes.Legs1.geometry}
				material={materials.Legs}
				visible={false}
			/>
			<mesh geometry={nodes.Legs2.geometry} material={materials.Legs} />
		</group>
	);
};

useGLTF.preload("./models-3d/chair.gltf");

export default Chair;
